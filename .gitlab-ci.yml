##
## Copyright (c) 2024 Hannah contributors.
##
## This file is part of hannah.
## See https://github.com/ekut-es/hannah for further info.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
stages:
  - build
  - test
  - deploy
  - deploy_test
  - run

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_HOME: "$CI_PROJECT_DIR/.poetry"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"

cache:
  key: "$CI_JOB_NAME"

before_script:
  - apt update
  - apt -y install git mesa-utils python3-dev libblas-dev liblapack-dev libsndfile1-dev libsox-dev cmake ninja-build curl build-essential python-is-python3


  # Install poetry using recommended method
  - curl -sSL https://install.python-poetry.org/ | python3
  - export PATH=${POETRY_HOME}/bin:${PATH}

  # install and manage dependencies with poetry
  - poetry config installer.max-workers 10
  - poetry install --all-extras

  # Show limits
  - ulimit -a

test_prebuilt_docker:
  stage: test
  image: cgerum/hannah:latest
  before_script:
    - export POETRY_HOME=/root/.local
    - export PATH=${POETRY_HOME}/bin:${PATH}
    - poetry config installer.max-workers 10
    - poetry install -E vision
    - ulimit -a
  script:
    - set -e
    - poetry run python3 -m pytest  -v --cov=hannah test hannah
  tags:
    - docker
  interruptible: true
  only:
    - merge_requests
  dependencies: []


test_python_39:
  stage: test
  image: python:3.9
  script:
    - set -e
    - poetry run python3 -m pytest  -v --cov=hannah test hannah --integration
  tags:
    - docker
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies: []
  cache:
    paths:
      - .cache/

#test_tvm:
#  stage: test
#  image: ubuntu:22.04
#  script:
#    - set -e
#    - apt-get install -y llvm-dev libclang-dev g++ python-is-python3
#    - poetry config installer.max-workers 10
#    - poetry run external/hannah-tvm/scripts/install_full.sh
#    - poetry install -E tvm -E vision
#    - poetry run python -m pytest  -v --cov=hannah --cov external/hannah-tvm test --integration
#  tags:
#    - docker
#  interruptible: true
#  allow_failure: false
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#  cache:
#    paths:
#      - .cache/

test_python_310:
  stage: test
  image: python:3.10
  script:
    - set -e
    - "echo 'import coverage; coverage.process_startup()' > sitecustomize.py"
    - export PYTHONPATH=$PWD
    - export COVERAGE_PROCESS_START=$PWD/.coveragerc
    - poetry run coverage run --source hannah -m pytest test
    - unset PYTHONPATH
    - unset COVERAGE_PROCESS_START
    - poetry run coverage report
    - poetry run coverage xml
  tags:
    - docker
  interruptible: true
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  dependencies: []
  cache:
    paths:
      - .cache/
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test_python_311:
  stage: test
  image: python:3.11
  script:
    - set -e
    - "echo 'import coverage; coverage.process_startup()' > sitecustomize.py"
    - export PYTHONPATH=$PWD
    - export COVERAGE_PROCESS_START=$PWD/.coveragerc
    - poetry run coverage run --source hannah -m pytest test
    - unset PYTHONPATH
    - unset COVERAGE_PROCESS_START
    - poetry run coverage report
    - poetry run coverage xml
  tags:
    - docker
  interruptible: true
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  dependencies: []
  cache:
    paths:
      - .cache/
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


build_docs:
  stage: test
  image: ubuntu:22.04
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv
  before_script:
    - apt update
    - apt -y install git python3-dev libblas-dev liblapack-dev libsndfile1-dev  cmake  curl  python-is-python3 python3-virtualenv python3-pip
    - python -m virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pydoc-markdown mkdocs pymdown-extensions
  script:
    - pydoc-markdown --build --site-dir public_html/
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  # Empty dependencies to disable artifacts passing
  dependencies: []


run_sca:
  stage: test
  image: cgerum/hannah:latest
  before_script:
    - export POETRY_HOME=/root/.local
    - export PATH=${POETRY_HOME}/bin:${PATH}
    - poetry config installer.max-workers 10
    - poetry install -E vision
    - ulimit -a
  script:
    - set -e
    - poetry run pre-commit install
    - poetry run pyre || true
    - poetry run pre-commit run -a
  tags:
    - docker
  interruptible: true
  allow_failure: true

#ml_cloud_integration:
#  stage: build
#  image: ubuntu:latest
#  dependencies: []
#  before_script:
#    - apt update
#    - apt -y install openssh-client
#    - eval $(ssh-agent -s)
#    - mkdir -p ~/.ssh
#    - echo "$ML_CLOUD_KEY" > ~/.ssh/ml_cloud.key
#    - chmod -R  0600 ~/.ssh
#    - ssh-add ~/.ssh/ml_cloud.key
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#  script:
#    - set -e
#    - scp scripts/ml_cloud_ci.sh cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/ml_cloud_ci.sh
#    - ssh cgerum05@134.2.168.52  /home/bringmann/cgerum05/ci/ml_cloud_ci.sh
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "schedule"


deploy to github:
  stage: build
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client git git-lfs

  variables:
    # Prevent "shallow update not allowed" error.
    # Set it to maximum possible count of *new* commits that you foresee being pushed to a remote.
    GIT_DEPTH: 1000

  only:
    - main
    - pub/.*
  script:
    - env
    - ./scripts/git-push git@github.com:ekut-es/hannah.git $CI_COMMIT_REF_NAME
  tags:
    - docker
