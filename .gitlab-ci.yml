##
## Copyright (c) 2022 University of TÃ¼bingen.
##
## This file is part of hannah.
## See https://atreus.informatik.uni-tuebingen.de/ties/ai/hannah/hannah for further info.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
stages:
  - build
  - test
  - deploy
  - deploy_test
  - run

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_HOME: "$CI_PROJECT_DIR/.poetry"
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"

before_script:
  - apt update
  - apt -y install mesa-utils python3-dev libblas-dev liblapack-dev libsndfile1-dev libsox-dev cmake ninja-build


  # Install poetry using recommended method
  - curl -sSL https://install.python-poetry.org/ | python3
  - export PATH=${POETRY_HOME}/bin:${PATH}

  # Work around: https://github.com/python-poetry/poetry/issues/3199
  - poetry config experimental.new-installer false

  # install and manage dependencies with poetry
  - poetry install -E vision

  # Show limits
  - ulimit -a

test_python_38:
  stage: test
  image: python:3.8
  script:
    - set -e
    - poetry run python3 -m pytest  -v --cov=hannah test
  tags:
    - docker
  interruptible: true
  dependencies: []

test_tvm:
  stage: test
  image: python:3.9
  script:
    - set -e
    - apt-get install -y llvm-dev libclang-dev
    - poetry run external/hannah-tvm/scripts/install_full.sh
    - poetry install -E tvm -E vision
    - poetry run python -m pytest  -v --cov=hannah --cov external/hannah-tvm test external/hannah-tvm/test
  tags:
    - docker
    - nfs
  interruptible: true
  allow_failure: true
  only:
    - master
    - main
    - /.*tvm.*/

test_python_39:
  stage: test
  image: python:3.9
  script:
    - set -e
    - "echo 'import coverage; coverage.process_startup()' > sitecustomize.py"
    - export PYTHONPATH=$PWD
    - export COVERAGE_PROCESS_START=$PWD/.coveragerc
    - poetry run coverage run --source hannah -m pytest test
    - unset PYTHONPATH
    - unset COVERAGE_PROCESS_START
    - poetry run coverage report
    - poetry run coverage xml
  tags:
    - docker
  interruptible: true
  artifacts:
    reports:
      cobertura: coverage.xml
  dependencies: []

build_docs:
  stage: deploy
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv

  before_script:
    - python3 -m virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pydoc-markdown mkdocs pymdown-extensions

  allow_failure: true
  script:
    - pydoc-markdown --build --site-dir /afs/wsi/home/gerum/public_html/hannah
  tags:
    - afs
    - native
  only:
    - master
    - main

  # Empty dependencies to disable artifacts passing
  dependencies: []

run_ml_cloud:
  before_script: []
  stage: build
  # run
  tags:
    - ml-cloud
  script:
    - cml ci
    - echo "Test comment" > report.md
    - cml send-comment report.md
  only:
    - master
  dependencies: []

run_ml_cloud_progressive_shrinking:
  stage: run
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  tags:
    - docker
  script:
    - set -e
    - tar cvzf hannah.tar.gz hannah/ scripts/ plugins/
    - ssh cgerum05@134.2.168.52 mkdir -p /home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - scp hannah.tar.gz cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && tar xvzf hannah.tar.gz"
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && mkdir -p jobs && sbatch scripts/ml_cloud_progressive_shrinking.sh"
  when: manual
  dependencies: []

run_ml_cloud_lidar:
  stage: run
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  tags:
    - docker
  script:
    - set -e
    - tar cvzf hannah.tar.gz hannah/ scripts/ plugins/
    - ssh cgerum05@134.2.168.52 mkdir -p /home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - scp hannah.tar.gz cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && tar xvzf hannah.tar.gz"
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && mkdir -p jobs && sbatch scripts/ml_cloud_lidar.sh"
  when: manual
  dependencies: []


run_sca:
  stage: build
  image: python:3.9
  script:
    - set -e
    - poetry run pre-commit install
    - poetry run pre-commit run -a
  tags:
    - docker
  interruptible: true
  allow_failure: true


# ml_cloud_update_env:
#   stage: deploy
#   image: ubuntu:latest
#   before_script:
#     - apt update
#     - apt -y install openssh-client
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$ML_CLOUD_KEY")
#     - mkdir -p ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

#   tags:
#     - docker
#   script:
#     - set -e
#     - tar cvzf hannah.tar.gz hannah/ scripts/ plugins/
#     - ssh cgerum05@134.2.168.52 mkdir -p /home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
#     - scp hannah.tar.gz cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
#     - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && tar xvzf hannah.tar.gz"
#     - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && mkdir -p jobs && scripts/ml_cloud_update_env.sh"
#   dependencies: []
#   only:
#     - master
#     - main



deploy to github:
  stage: build
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client git git-lfs

  variables:
    # Prevent "shallow update not allowed" error.
    # Set it to maximum possible count of *new* commits that you foresee being pushed to a remote.
    GIT_DEPTH: 1000

  only:
    - main
  script: ./scripts/git-push git@github.com:ekut-es/hannah.git main
  tags:
    - docker
