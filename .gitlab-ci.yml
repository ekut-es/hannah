stages:
  - build
  - test
  - deploy
  - deploy_test
  - run

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_HOME: "$CI_PROJECT_DIR/.poetry"
  GIT_SUBMODULE_STRATEGY: recursive
  DEBIAN_FRONTEND: "noninteractive"

before_script:
  - cat /etc/os-release
  - source /etc/os-release
  - if [[ $ID == "debian" || $ID == "ubuntu" ]]; then
  - apt update
  - apt -y install mesa-utils python3-dev libblas-dev liblapack-dev libsndfile1-dev libsox-dev
  - else
  - yum install epel-release -y
  - yum install git sudo python36 -y
  - yum install wget curl -y
  - yum groupinstall 'Development Tools' -y
  - fi

  # Install poetry using recommended method
  - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
  - export PATH=${POETRY_HOME}/bin:${PATH}

  # Work around: https://github.com/python-poetry/poetry/issues/3199
  - poetry config experimental.new-installer false

  # install and manage dependencies with poetry
  - poetry run python -m pip install setuptools==59.5.0
  - poetry install -E vision

  # Show limits
  - ulimit -a

test_python_38:
  stage: test
  image: python:3.8
  script:
    - set -e
    - poetry run python3 -m pytest  -v --cov=hannah test
  tags:
    - docker
  interruptible: true
  dependencies: []

test_python_39:
  stage: test
  image: python:3.9
  script:
    - set -e
    - echo "import coverage; coverage.process_startup()" > sitecustomize.py
    - export PYTHONPATH=$PWD
    - export COVERAGE_PROCESS_START=$PWD/.coveragerc
    - poetry run coverage run --source hannah -m pytest test
    - unset PYTHONPATH
    - unset COVERAGE_PROCESS_START
    - poetry run coverage report
    - poetry run coverage xml
  tags:
    - docker
  interruptible: true
  artifacts:
    reports:
      cobertura: coverage.xml
  dependencies: []

build_docs:
  stage: deploy
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv

  before_script:
    - python3 -m virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pydoc-markdown mkdocs pymdown-extensions

  allow_failure: true
  script:
    - pydoc-markdown --build --site-dir /afs/wsi/home/gerum/public_html/hannah
  tags:
    - afs
    - native
  only:
    - master

  # Empty dependencies to disable artifacts passing
  dependencies: []

build_image:
  stage: build
  before_script:
    # Install poetry using recommended method
    - apk add python3
    - apk add curl
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
    - export PATH=${POETRY_HOME}/bin:${PATH}
  image:
    name: quay.io/singularity/singularity:v3.7.3
    entrypoint: [""]

  tags:
    - docker
    - privileged
  script:
    - set -e
    - cd ml_cloud
    - ./build_image.sh
  artifacts:
    paths:
      - ml_cloud/ml_cloud.sif
    expire_in: 1 day
  only:
    - master
    - docker_container

test_image:
  stage: test
  before_script: [""]
  image:
    name: quay.io/singularity/singularity:v3.7.3
    entrypoint: [""]

  tags:
    - docker
    - privileged
  script:
    - export PWD=`pwd`
    - singularity run --no-home --bind $PWD ml_cloud/ml_cloud.sif  python -m hannah.train trainer.fast_dev_run=True
  dependencies:
    - build_image
  only:
    - master
    - docker_container

deploy_image:
  stage: deploy
  before_script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  image:
    name: quay.io/singularity/singularity:v3.7.3
    entrypoint: [""]

  tags:
    - docker
    - privileged
  script:
    - cd ml_cloud
    - scp ml_cloud.sif cgerum05@134.2.168.52:/mnt/qb/work/bringmann/cgerum05
  dependencies:
    - build_image
    - test_image
  only:
    - master
    - docker_container


deploy_test:
  stage: deploy_test
  before_script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  image:
    name: quay.io/singularity/singularity:v3.7.3
    entrypoint: [""]

  tags:
    - docker
  script:
    - cd ml_cloud
    - ssh cgerum05@134.2.168.52 ls
  dependencies:
    - deploy_image
  only:
    - master
    - docker_container

run_ml_cloud:
  stage: run
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  tags:
    - docker
  script:
    - set -e
    - tar cvzf hannah.tar.gz hannah/ scripts/ plugins/
    - ssh cgerum05@134.2.168.52 mkdir -p /home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - scp hannah.tar.gz cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && tar xvzf hannah.tar.gz"
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && mkdir -p jobs && sbatch scripts/ml_cloud_kws.sh"
  when: manual
  dependencies: []

run_ml_cloud_progressive_shrinking:
  stage: run
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  tags:
    - docker
  script:
    - set -e
    - tar cvzf hannah.tar.gz hannah/ scripts/ plugins/
    - ssh cgerum05@134.2.168.52 mkdir -p /home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - scp hannah.tar.gz cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && tar xvzf hannah.tar.gz"
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && mkdir -p jobs && sbatch scripts/ml_cloud_progressive_shrinking.sh"
  when: manual
  dependencies: []

run_ml_cloud_lidar:
  stage: run
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  tags:
    - docker
  script:
    - set -e
    - tar cvzf hannah.tar.gz hannah/ scripts/ plugins/
    - ssh cgerum05@134.2.168.52 mkdir -p /home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - scp hannah.tar.gz cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && tar xvzf hannah.tar.gz"
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && mkdir -p jobs && sbatch scripts/ml_cloud_lidar.sh"
  when: manual
  dependencies: []


run_sca:
  stage: build
  image: python:3.9
  script:
    - set -e
    - poetry run pre-commit install
    - poetry run pre-commit run -a
  tags:
    - docker
  interruptible: true
  allow_failure: true


ml_cloud_update_env:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ML_CLOUD_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  tags:
    - docker
  script:
    - set -e
    - tar cvzf hannah.tar.gz hannah/ scripts/ plugins/
    - ssh cgerum05@134.2.168.52 mkdir -p /home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - scp hannah.tar.gz cgerum05@134.2.168.52:/home/bringmann/cgerum05/ci/$CI_COMMIT_SHORT_SHA
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && tar xvzf hannah.tar.gz"
    - ssh cgerum05@134.2.168.52 "cd ci/$CI_COMMIT_SHORT_SHA && mkdir -p jobs && scripts/ml_cloud_update_env.sh"
  dependencies: []
  only:
    - master
