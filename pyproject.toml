[tool.poetry]
name = "hannah"
version = "0.1.0"
description = "Hardware Accelerator and Neural Network Architecture seArcH"
authors = [
    "Christoph Gerum <christoph.gerum@uni-tuebingen.de>",
    "Adrian Frischknecht <adrian.frischknecht@uni-tuebingen.de>",
    "Felix Lorenz <felix.lorenz@student.uni-tuebingen.de>",
    "Tobias Hald <tobias.hald@student.uni-tuebingen.de>"
]
packages = [
    {include='hydra_plugins'}
]


[tool.poetry.dependencies]
python = ">=3.9 <3.13"
pwlf = "^2.0.0"
gitdb2 = "2.0.6"
chainmap = "^1.0.3"
torch = "^2.2.2"
torchaudio = "^2.2.2"
torchvision = "^0.17.2"
SoundFile = "^0.10.3"
zipp = "^3.3.1"
bitstring = "^3.1.7"
wfdb = "^3.2.0"
tqdm="^4.60.0"
seaborn="^0.13.2"
pandas="^1.2.4"
hydra-optuna-sweeper = {version = "^1.1.1"}

hydra-core = "^1.1.0"
hydra-joblib-launcher = ">1.1.0"
hydra-submitit-launcher = ">=1.2.0"

tabulate = "^0.8.3"
GitPython = "^3.1.14"
h5py = "^3.2.1"
sympy = "^1.7.1"
nvsmi = "^0.4.2"
libsvm="^3.23.0.4"
fairscale = "^0.4.5"
numpy = {version = "^1.26.4", optional = true}
scikit-learn = "^1.1.1"
hydra-colorlog = "^1.2.0"
z3-solver = "^4.11.2.0"
xgboost = "^1.5.2"

# optional dependencies for backends
onnxruntime = {version = "^1.4.0", optional = true}

# optional dependencies for tvm backend
# hannah-tvm = {path = "external/hannah-tvm", optional = true, extras = ["automate", "micro"], develop=true}


#dependencies for vision tasks
imagecorruptions = {version = "^1.1.2", optional = true}
timm = {version = "^0.9.12", optional = true}
pycocotools = {version = "^2.0.6", optional = true}
gdown = {version = "^4.5.3", optional = true}
albumentations = {version = "^1.4.3", optional = true}
kornia = {version = "^0.7.1", optional = true}
lightning = "^2.1.2"
dgl = "1.1.3"
pytorch-lightning = "^2.1.3"
onnx = "^1.16.0"
cuda-python = {version = "^12.1.0", optional = true}
spox = "^0.12.0"
optree = "^0.11.0"

[tool.poetry.dev-dependencies]
pytest = ">=7.2.0"
pre_commit = ">=2.7.1"
pytest-cov = ">=2.10.1"
rope = ">=0.19.0"
mypy = ">=0.910"
torch-tb-profiler = ">=0.2.0"
black = ">=22.6.0"
coverage = ">=6.3.2"
isort = ">=5.10.1"
pyment = ">=0.3.3"
mkdocstrings = {version = ">=0.19.0", extras = ["python"]}
mkdocs-gen-files = ">=0.3.4"
mkdocs-literate-nav = ">=0.4.1"
flaky = ">=3.7.0"
ruff = "^0.5.5"


[tool.poetry.extras]
#tvm = ["hannah-tvm"]
onnxrt = ["onnxruntime", "onnx"]
vision = ["pycocotools", "albumentations", "imagecorruptions", "timm", "gdown", "kornia"]

[tool.poetry.scripts]
hannah-train = 'hannah.tools.train:main'
hannah-characterize = 'hannah.tools.characterize:main'
hannah-eval = 'hannah.tools.eval:main'
hannah-objectdetection-eval = 'hannah.tools.objectdetection_eval:main'
hannah-nas-eval = "hannah.nas.eval.__main__:main"


[tool.poetry.group.dev.dependencies]
pyre-check = "^0.9.17"
pytest-xdist = "^3.1.0"
ipykernel = "^6.29.4"
ruff = "^0.5.5"


[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.isort]
profile = "black"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "staticfiles/*",
    "test/data/*",
    "__pycache__", # from .flake8
    "hannah/models/tc_snn", # from .flake8
    "SNNLayers.py", # from .flake8
    "external/*", # not hannah-tvm or other external modules
    "hannah/nas/test/test_z3.py",
    "scripts/eeg/eeg_dataset_creator.py",
]

line-length = 120
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
select = [
  "F", # pyflakes
  "E", # errors
  # "W", # warnings
  # "C90", # complexity warnings
  # "I", # imports
  # "N", # naming
  # "UP", # pyupgrade, use language features correctly
]
ignore = [
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
  "UP038", # Checks for uses of isinstance/issubclass that take a tuple
          # of types for comparison.
          # Deactivated because it can make the code slow:
          # https://github.com/astral-sh/ruff/issues/7871
  "E203", # whitespace before symbol
  "E401", # multiple import statements
  "E402", # import shadow
  "E501", # line too long
  "E701", # multi statements
  "E713", # not in test
  "E721", # use is
  "E722", # bare except
  "E741", # ambiguous-variable-name
  "F401", # unused imports
  "F403", # import *
  "F841", # unused var
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
    "UP038"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = false
